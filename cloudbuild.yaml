steps:
  - id: 'Build terraform vars'
    dir: infra
    name: ubuntu
    script: |
      echo "Using Backend bucket: ${_TFSTATE_BUCKET}"
      cat <<EOT_BOOT > "/workspace/terraform.tfvars"
      project = "$PROJECT_ID"
      region = "$LOCATION"
      tfstate_bucket = "$_TFSTATE_BUCKET"
      discord_app_id = "$_DISCORD_APP_ID"
      discord_public_key = "$_DISCORD_PUBLIC_KEY"
      discord_secret_id = "$_DISCORD_SECRET_ID"
      EOT_BOOT
  - id: 'terraform init'
    dir: infra
    name: 'hashicorp/terraform:latest'
    script: terraform init -no-color -backend-config="bucket=${_TFSTATE_BUCKET}" -var-file=/workspace/terraform.tfvars
  - id: 'terraform fmt'
    dir: infra
    name: 'hashicorp/terraform:latest'
    script: terraform fmt -no-color -check
  - id: 'terraform plan'
    dir: infra
    name: 'hashicorp/terraform:latest'
    script: terraform plan -no-color -var-file=/workspace/terraform.tfvars -out=/workspace/plan
  - id: 'terraform apply'
    dir: infra
    name: 'hashicorp/terraform:latest'
    script: terraform apply -no-color --auto-approve -var-file=/workspace/terraform.tfvars /workspace/plan
  - id: 'Deploy Discord config'
    dir: deploy-commands-function
    name: golang:1.22
    script: go run .
    env:
      - 'DISCORD_SECRET_ID=$_DISCORD_SECRET_ID'
      - 'DISCORD_APP_ID=$_DISCORD_APP_ID'
    secretEnv: [
      'DISCORD_SECRET_TOKEN'
    ]
availableSecrets:
  secretManager:
  - versionName: ${_DISCORD_SECRET_ID}/versions/latest
    env: 'DISCORD_SECRET_TOKEN'
options:
  logging: CLOUD_LOGGING_ONLY
  automapSubstitutions: true
